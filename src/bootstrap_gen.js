// Generated by CoffeeScript 1.6.3
(function() {
  var addClass, bootstrap, bootstrapLink, constructors;

  bootstrapLink = "//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc1/css/bootstrap.min.css";

  addClass = function(element, newClass) {
    var current;
    current = element.className.split(" ");
    current.push(newClass);
    return element.className = current.join(' ');
  };

  constructors = {
    Number: Number,
    String: String,
    Object: JSON.parse,
    Array: JSON.parse
  };

  bootstrap = {
    row: function() {
      var element;
      element = document.createElement("div");
      element.className = "row";
      return element;
    },
    list: function(array, onchange) {
      var handleChange, input, inputs, item, li, ul, _i, _len;
      if (array == null) {
        array = [];
      }
      ul = document.createElement('ul');
      ul.className = 'list-group';
      inputs = [];
      handleChange = function() {
        var con, data, inp;
        data = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = inputs.length; _i < _len; _i++) {
            inp = inputs[_i];
            con = constructors[inp.type.name] || inp.type;
            _results.push(con(inp.el.value));
          }
          return _results;
        })();
        return onchange(data);
      };
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        item = array[_i];
        li = document.createElement('li');
        li.className = 'list-group-item';
        if (typeof onchange === "function") {
          input = bootstrap.input();
          input.value = (function() {
            switch (typeof item) {
              case "string":
                return item;
              case "number":
                return item.toString();
              default:
                return JSON.stringify(item);
            }
          })();
          input.addEventListener('keyup', handleChange);
          inputs.push({
            el: input,
            type: item.constructor
          });
          li.appendChild(input);
        } else {
          li.textContent = item.toString();
        }
        ul.appendChild(li);
      }
      return ul;
    },
    input: function() {
      var input;
      input = document.createElement('input');
      input.className = "form-control";
      input.type = "text";
      return input;
    },
    h: function(level, text) {
      var header;
      header = document.createElement('h' + level.toString());
      header.textContent = text;
      return header;
    },
    pre: function(text) {
      var pre;
      pre = document.createElement('pre');
      pre.textContent = text;
      return pre;
    },
    panel: function(kind) {
      var panel;
      if (kind == null) {
        kind = "info";
      }
      panel = document.createElement('div');
      panel.className = 'panel panel-' + kind;
      return panel;
    },
    panelHead: function(text) {
      var head;
      head = document.createElement('div');
      head.className = 'panel-heading';
      head.textContent = text;
      return head;
    },
    getBootstrap: function() {
      var link;
      if (!bootstrap.weHaveBootstrap()) {
        link = document.createElement('link');
        link.href = bootstrapLink;
        link.type = "text/css";
        link.rel = "stylesheet";
        return document.head.appendChild(link);
      }
    },
    weHaveBootstrap: function() {
      var fileName, ss, _i, _len, _ref, _ref1, _ref2;
      _ref = document.styleSheets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ss = _ref[_i];
        fileName = ((_ref1 = ss.href) != null ? (_ref2 = _ref1.split("/").slice(-1)) != null ? _ref2[0] : void 0 : void 0) || "";
        if (fileName.indexOf("bootstrap") !== -1) {
          return true;
        }
      }
      return false;
    }
  };

  this.bootstrap = bootstrap;

}).call(this);

/*
//@ sourceMappingURL=bootstrap_gen.map
*/
