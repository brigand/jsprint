// jsprint 0.1.0
// (c) 2013 Frankie Bagnardi - http://brigand.github.io/jsprint/
// License: MIT (http://www.opensource.org/licenses/mit-license.php)
(function(){
// Generated by CoffeeScript 1.6.3
var addClass, bootstrap, bootstrapLink, constructors;

bootstrapLink = "//netdna.bootstrapcdn.com/bootstrap/3.0.0-rc1/css/bootstrap.min.css";

addClass = function(element, newClass) {
  var current;
  current = element.className.split(" ");
  current.push(newClass);
  return element.className = current.join(' ');
};

constructors = {
  Number: Number,
  String: String,
  Object: JSON.parse,
  Array: JSON.parse
};

bootstrap = {
  row: function() {
    var element;
    element = document.createElement("div");
    element.className = "row";
    return element;
  },
  list: function(array, onchange) {
    var handleChange, input, inputs, item, li, ul, _i, _len;
    if (array == null) {
      array = [];
    }
    ul = document.createElement('ul');
    ul.className = 'list-group';
    inputs = [];
    handleChange = function() {
      var con, data, inp;
      data = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = inputs.length; _i < _len; _i++) {
          inp = inputs[_i];
          con = constructors[inp.type.name] || inp.type;
          _results.push(con(inp.el.value));
        }
        return _results;
      })();
      return onchange(data);
    };
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      li = document.createElement('li');
      li.className = 'list-group-item';
      if (typeof onchange === "function") {
        input = bootstrap.input();
        input.value = (function() {
          switch (typeof item) {
            case "string":
              return item;
            case "number":
              return item.toString();
            default:
              return JSON.stringify(item);
          }
        })();
        input.addEventListener('keyup', handleChange);
        inputs.push({
          el: input,
          type: item.constructor
        });
        li.appendChild(input);
      } else {
        li.textContent = item.toString();
      }
      ul.appendChild(li);
    }
    return ul;
  },
  input: function() {
    var input;
    input = document.createElement('input');
    input.className = "form-control";
    input.type = "text";
    return input;
  },
  h: function(level, text) {
    var header;
    header = document.createElement('h' + level.toString());
    header.textContent = text;
    return header;
  },
  pre: function(text) {
    var pre;
    pre = document.createElement('pre');
    pre.textContent = text;
    return pre;
  },
  panel: function(kind) {
    var panel;
    if (kind == null) {
      kind = "info";
    }
    panel = document.createElement('div');
    panel.className = 'panel panel-' + kind;
    return panel;
  },
  panelHead: function(text) {
    var head;
    head = document.createElement('div');
    head.className = 'panel-heading';
    head.textContent = text;
    return head;
  },
  getBootstrap: function() {
    var link;
    if (!bootstrap.weHaveBootstrap()) {
      link = document.createElement('link');
      link.href = bootstrapLink;
      link.type = "text/css";
      link.rel = "stylesheet";
      return document.head.appendChild(link);
    }
  },
  weHaveBootstrap: function() {
    var fileName, ss, _i, _len, _ref, _ref1, _ref2;
    _ref = document.styleSheets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ss = _ref[_i];
      fileName = ((_ref1 = ss.href) != null ? (_ref2 = _ref1.split("/").slice(-1)) != null ? _ref2[0] : void 0 : void 0) || "";
      if (fileName.indexOf("bootstrap") !== -1) {
        return true;
      }
    }
    return false;
  }
};

this.bootstrap = bootstrap;
// Generated by CoffeeScript 1.6.3
var FunctionWatcher, errorCopy, handleError, jsprint, panelTypes, printToNode, rootElement, row,
  __slice = [].slice;

rootElement = document.createElement('div');

rootElement.className = 'container';

document.body.appendChild(rootElement);

bootstrap.getBootstrap();

row = null;

FunctionWatcher = (function() {
  function FunctionWatcher(fun, args) {
    var params;
    this.fun = fun;
    this.args = args;
    this.container = bootstrap.row();
    params = bootstrap.list(this.args, this.updateResult.bind(this));
    this.resultView = document.createElement('div');
    this.container.appendChild(params);
    this.container.appendChild(this.resultView);
    this.updateResult(this.args);
  }

  FunctionWatcher.prototype.updateResult = function(newArgs) {
    var child, error, errorNode, node, result, _i, _len, _ref;
    try {
      result = this.fun.apply(this, newArgs);
    } catch (_error) {
      error = _error;
      errorNode = handleError(error, true);
    }
    _ref = this.resultView.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      this.resultView.removeChild(child);
    }
    if (errorNode != null) {
      return this.resultView.appendChild(errorNode);
    } else {
      node = printToNode(result, [], true);
      return this.resultView.appendChild(node);
    }
  };

  return FunctionWatcher;

})();

jsprint = function() {
  var node, other, what;
  what = arguments[0], other = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  node = printToNode(what, other);
  if (jsprint.condenced) {
    if (row === null || row.children.length === 2) {
      row = bootstrap.row();
      rootElement.appendChild(row);
    }
    node.className = 'col-6';
    row.appendChild(node);
  } else {
    rootElement.appendChild(node);
  }
};

panelTypes = {
  "Function": "primary",
  "Arrray": "warning",
  "String": "info",
  Default: "success"
};

printToNode = function(what, other, notitle) {
  var body, panel, panelType, title, watcher;
  if (notitle == null) {
    notitle = false;
  }
  panelType = panelTypes[what.constructor.name] || panelTypes.Default;
  switch (what.constructor.name) {
    case "Function":
      watcher = new FunctionWatcher(what, other);
      title = what.name || "anonymousFunction";
      body = watcher.container;
      break;
    case "Array":
      title = 'Array';
      body = bootstrap.list(what);
      break;
    case "String":
      switch (other.length) {
        case 0:
          title = "String";
          body = bootstrap.pre(what);
          break;
        default:
          title = what;
          body = printToNode(other[0], other.slice(1), true);
          if (panelTypes[other[0].constructor.name]) {
            panelType = panelTypes[other[0].constructor.name];
          }
      }
      break;
    default:
      title = what.constructor.name;
      body = bootstrap.pre(JSON.stringify(what, null, 4));
  }
  if (!notitle) {
    panel = bootstrap.panel(panelType || panelTypes.Default);
    if (jsprint.condenced) {
      panel.className += " col-6";
    }
    panel.appendChild(bootstrap.panelHead(title));
    panel.appendChild(body);
    return panel;
  } else {
    return body;
  }
};

handleError = function(e, returnNode) {
  var node;
  node = printToNode("Your code isnt running", [e]);
  node.className += "panel-danger";
  if (returnNode === true) {
    return node;
  } else {
    rootElement.appendChild(node);
    return false;
  }
};

if (typeof window.onerror === "function") {
  errorCopy = window.onerror;
  window.onerror = function() {
    errorCopy.apply(window, arguments);
    return handleError.apply(window, arguments);
  };
} else {
  window.onerror = handleError;
}

this.jsprint = jsprint;

jsprint['condenced'] = false;

jsprint['setRootElement'] = function(el) {
  return rootElement = el;
};
window['jsprint'] = jsprint;
}).call(this);
